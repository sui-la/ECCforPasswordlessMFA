{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default configuration\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('sessionToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Unauthorized - clear session\n    localStorage.removeItem('sessionToken');\n    localStorage.removeItem('privateKey');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// API endpoints\nexport const authAPI = {\n  // Registration\n  register: data => api.post('/api/auth/register', data),\n  checkEmailAvailability: email => api.post('/api/auth/register/check-email', {\n    email\n  }),\n  generateRegistrationChallenge: email => api.post('/api/auth/register/challenge', {\n    email\n  }),\n  verifyRegistration: data => api.post('/api/auth/register/verify', data),\n  // Authentication\n  initiateLogin: email => api.post('/api/auth/login/initiate', {\n    email\n  }),\n  verifyLogin: data => api.post('/api/auth/login/verify', data),\n  logout: sessionToken => api.post('/api/auth/logout', {\n    session_token: sessionToken\n  }),\n  validateSession: sessionToken => api.post('/api/auth/session/validate', {\n    session_token: sessionToken\n  }),\n  refreshSession: sessionToken => api.post('/api/auth/session/refresh', {\n    session_token: sessionToken\n  }),\n  // Secure session\n  establishSecureSession: data => api.post('/api/auth/secure-session/establish', data)\n};\nexport const userAPI = {\n  getProfile: () => api.get('/api/user/profile'),\n  getSessions: () => api.get('/api/user/sessions'),\n  invalidateAllSessions: () => api.post('/api/user/sessions/invalidate-all')\n};\nexport const healthAPI = {\n  check: () => api.get('/health')\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","data","post","checkEmailAvailability","email","generateRegistrationChallenge","verifyRegistration","initiateLogin","verifyLogin","logout","sessionToken","session_token","validateSession","refreshSession","establishSecureSession","userAPI","getProfile","get","getSessions","invalidateAllSessions","healthAPI","check"],"sources":["C:/Users/User/PycharmProjects/ECCforPasswordlessMFA/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with default configuration\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('sessionToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response?.status === 401) {\n      // Unauthorized - clear session\n      localStorage.removeItem('sessionToken');\n      localStorage.removeItem('privateKey');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// API endpoints\nexport const authAPI = {\n  // Registration\n  register: (data: { email: string; name?: string; public_key: string }) =>\n    api.post('/api/auth/register', data),\n  \n  checkEmailAvailability: (email: string) =>\n    api.post('/api/auth/register/check-email', { email }),\n  \n  generateRegistrationChallenge: (email: string) =>\n    api.post('/api/auth/register/challenge', { email }),\n  \n  verifyRegistration: (data: { email: string; nonce: string; signature: string }) =>\n    api.post('/api/auth/register/verify', data),\n  \n  // Authentication\n  initiateLogin: (email: string) =>\n    api.post('/api/auth/login/initiate', { email }),\n  \n  verifyLogin: (data: { challenge_id: string; signature: string }) =>\n    api.post('/api/auth/login/verify', data),\n  \n  logout: (sessionToken: string) =>\n    api.post('/api/auth/logout', { session_token: sessionToken }),\n  \n  validateSession: (sessionToken: string) =>\n    api.post('/api/auth/session/validate', { session_token: sessionToken }),\n  \n  refreshSession: (sessionToken: string) =>\n    api.post('/api/auth/session/refresh', { session_token: sessionToken }),\n  \n  // Secure session\n  establishSecureSession: (data: { user_id: string; client_public_key: string }) =>\n    api.post('/api/auth/secure-session/establish', data),\n};\n\nexport const userAPI = {\n  getProfile: () => api.get('/api/user/profile'),\n  \n  getSessions: () => api.get('/api/user/sessions'),\n  \n  invalidateAllSessions: () => api.post('/api/user/sessions/invalidate-all'),\n};\n\nexport const healthAPI = {\n  check: () => api.get('/health'),\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}